1. split and join
>>> a = "this is a string"
>>> a = a.split(" ") # a is converted to a list of strings. 
>>> print a
['this', 'is', 'a', 'string']

>>> a = "-".join(a)
>>> print a
this-is-a-string 
https://www.hackerrank.com/challenges/python-string-split-and-join/problem?isFullScreen=true


2. isalnum, isalpha, isdigit, islower, isupper, swapcase
https://www.hackerrank.com/challenges/string-validators/problem?isFullScreen=true



3. .capitalize()[ works only if we give each word of a string, not a whole string] , .upper(), .lower() .title()
https://www.hackerrank.com/challenges/capitalize/problem?isFullScreen=true


4. collections.Counter()
A counter is a container that stores elements as dictionary keys, and their counts are stored as dictionary values.

Sample Code

>>> from collections import Counter
>>> 
>>> myList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3]
>>> print Counter(myList)
Counter({2: 4, 3: 4, 1: 3, 4: 2, 5: 1})


5. map()

def addition(n):
    return n + n
 
# We double all numbers using map()
numbers = (1, 4, 3, 5)
result = map(addition, numbers)        #result = map(lambda x:x+x, numbers)
print(list(result))
Output-
[2, 8, 6, 10]

https://www.hackerrank.com/challenges/collections-counter/problem?isFullScreen=true


6. s=set() / set
   t=() /tuple
s.add()
s.update()
s.discard()
s.remove()
 If that value is not present, discard() does nothing, but remove() will raise a KeyError exception
Sets are an unordered collection of unique values. A single set contains values of any immutable data type.
set operations-
https://www.hackerrank.com/challenges/symmetric-difference/problem?isFullScreen=trues
https://www.hackerrank.com/challenges/py-set-symmetric-difference-operation/problem?isFullScreen=true
https://www.hackerrank.com/challenges/py-set-mutations/problem?isFullScreen=true

https://www.hackerrank.com/challenges/py-check-subset/submissions/code/364029732

https://www.hackerrank.com/challenges/py-check-strict-superset/problem?isFullScreen=true


>>> s = set("Hacker")
>>> print s.difference("Rank")
set(['c', 'r', 'e', 'H'])

 H a c k e r
-R a n k
------------
H   c   e r
------------


from collections import Counter
x = Counter("geeksforgeeks")
for i in x.elements():
	print ( i, end = " ")

for key, val in b.items():
    if val == 1:
        print(key)

7. union etc.
	https://www.hackerrank.com/challenges/py-set-symmetric-difference-operation/problem?isFullScreen=true


We have seen the applications of union, intersection, difference and symmetric difference operations, but these operations do not make any changes or mutations to the set.

We can use the following operations to create mutations to a set:

.update() or |=




7. itertools.combinations_with_replacement(iterable, r)
This tool returns  length subsequences of elements from the input iterable allowing individual elements to be repeated more than once.

Combinations are emitted in lexicographic sorted order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order.

https://www.hackerrank.com/challenges/itertools-permutations/problem?isFullScreen=true
https://www.hackerrank.com/challenges/itertools-combinations/problem?isFullScreen=true


8. enumerate()
l1 = ["eat", "sleep", "repeat"]
s1 = "geek"
 
# creating enumerate objects
obj1 = enumerate(l1)
obj2 = enumerate(s1) 
print ("Return type:", type(obj1))
print (list(enumerate(l1))) 
# changing start index to 2 from 0
print (list(enumerate(s1, 2)))

Output:
Return type: <class 'enumerate'>
[(0, 'eat'), (1, 'sleep'), (2, 'repeat')]
[(2, 'g'), (3, 'e'), (4, 'e'), (5, 'k')]


9. calendar
import calendar
m,d,y=map(int, input().split())
weekday=calendar.weekday(y, m, d) #0th indexed

print(calendar.day_name[weekday].upper())

https://docs.python.org/2/library/calendar.html#calendar.TextCalendar
https://www.hackerrank.com/challenges/calendar-module/problem?isFullScreen=true


10.try, except, else, finally

11 class
	class acts as a template/blueprint for the object
	object is an instance of the class

self parameter is a reference to the current instance or object of the class and it is used to access variables belonging to that class.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class person:
    height=6
    weight=71
    
    def info(self):
        self.height=5
        self.weight=56
        print(f'height is {self.height} and weight is {self.weight}')
        
   
faiz=person()     
print(faiz.height)
print(faiz.weight)

faiz.info()

o/p:
6
71
height is 45 and weight is 456


 __init__ : a constructor, automatically called when creating an object 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

try:
  print('x')
except:
  print("Something went wrong")
else:
	print('ok')
finally:
  print("The 'try except' is finished")

o/p:
	x
	ok
	The 'try except' is finished




try:
  print(x)
except:
  print("Something went wrong")
else:
	print('hey')
finally:
  print("The 'try except' is finished")

o/p:
	Something went wrong
	The 'try except' is finished



try:
    x, y=map(int, input().split())
    print('dividend is: ', x)
    print('divisor is: ', y)
    print('quotient: ',x//y)
except ZeroDivisionError:
    print("You cannot divide by zero.")
except ValueError:
    print("Invalid input. Please enter a valid number.")
except Exception as e:
    print(f"An error occurred: {e}")


list comprehension:
	List comprehensions are great because they require less lines of code, are easier to comprehend, and are generally faster than a for loop.
	1. Find all of the numbers from 1–100 that are divisible by 8:
	numbers=[i for i in range(1, 100) if i%8==0]
	2. Find all of the numbers from 1–1000 that have a 6 in them
	numbers=[i for i in range(1, 100) if '6' in str(i)]
	3. Use a dictionary comprehension to count the length of each word in a sentence
	q6_answer = {word:len(word) for word in words}
	https://towardsdatascience.com/beginner-to-advanced-list-comprehension-practice-problems-a89604851313

	ans=[[i, j, k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if(i+j+k!=n)]
    https://www.hackerrank.com/challenges/list-comprehensions/submissions/code/401725413


https://www.hackerrank.com/challenges/zipped/problem?isFullScreen=true
use a variable in realtime expression:
ex- i/p: polynimial expression, x  ||  o/p: value of y
https://www.hackerrank.com/challenges/input/problem 



eval: https://www.hackerrank.com/challenges/python-eval/problem

any()
This expression returns True if any element of the iterable is true.
If the iterable is empty, it will return False.

Code

>>> any([1>0,1==0,1<0])
True
>>> any([1<0,2<1,3<2])
False
all()
This expression returns True if all of the elements of the iterable are true. If the iterable is empty, it will return True.

Code

>>> all(['a'<'b','b'<'c'])
True
>>> all(['a'<'b','c'<'b'])
False


https://www.hackerrank.com/challenges/any-or-all/problem?isFullScreen=true



lambda function:
		Lambda is a single expression anonymous function often used as an inline function. In simple words, it is a function that has only one line in its body. It proves very handy in functional and GUI programming.
		
		>> sum = lambda a, b, c: a + b + c
		>> sum(1, 2, 3)
		6
		Note:
		
		Lambda functions cannot use the return statement and can only have a single expression. Unlike def, which creates a function and assigns it a name, lambda creates a function and returns the function itself. Lambda can be used inside lists and dictionaries.
		
Map and Lambda Function
https://www.hackerrank.com/challenges/map-and-lambda-expression/problem


50. RegEx


^[aeiou]?\d*\.\d+$


^ asserts position at the start of the string(i.e. string must start here with aeiou(any of vowels) 
? matches the previous token between zero and one times, as many times as possible, giving back as needed (greedy) 
* matches the previous token between zero and unlimited times, as many times as possible, giving back as needed (greedy) 
+ matches the previous token between one and unlimited times, as many times as possible, giving back as needed (greedy) 
aeiou matches any single character in the list aeiou (case sensitive)

\d matches a digit (equivalent to [0-9])
\. matches any . character
. matches any character (except for line terminators)
$ asserts position at the end of the string, or before the line terminator right at the end of the string (if any)

^[a-z] if string starts with a-z
[^a-z] not including a-z

https://www.hackerrank.com/challenges/introduction-to-regex/problem

https://www.hackerrank.com/challenges/re-split/problem


XML:
https://diveintopython3.net/xml.html#xml-structure



Decorators:
https://www.youtube.com/watch?v=PTBZ674EsvI
a way to modify an existing function
def greet(fx):
  def mfx(*args, **kwargs):
    print("Good Morning")
    fx(*args, **kwargs)
    print("Thanks for using this function")
  return mfx

@greet
def hello():
  print("Hello world")

@greet
def add(a, b):
  print(a+b)
  
# greet(hello)()
hello()
# greet(add)(1, 2)
add(1, 2)

https://www.hackerrank.com/challenges/standardize-mobile-number-using-decorators/problem


swap the cases of each character in a string:
s='1bCD2dE'
print(s.swapcase())
o/p:1BcDe


printing float number with two decimal values:

print(f"{num:.2f}")
OR
print(format(num,".2f"))
https://www.hackerrank.com/challenges/finding-the-percentage?isFullScreen=true



to extract from the object(unwrap+remove the delimiter: [[1, 2], [3, 4]] --> [1, 2] [3, 4] OR [1, 2] --> 1 2
.zip()
https://www.hackerrank.com/challenges/zipped/problem?isFullScreen=true

X=[[1, 2, 3, 4],
[1, 2, 3, 4],
[1, 2, 3, 4]]

ans=list(zip(*X)) 
print(ans) #[(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4)]
print(*X) # [1, 2, 3, 4] [1, 2, 3, 4] [1, 2, 3, 4]
print(*X[0]) # 1 2 3 4




An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day. It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year contains a leap day.

In the Gregorian calendar, three conditions are used to identify leap years:

The year can be evenly divided by 4, is a leap year, unless:
The year can be evenly divided by 100, it is NOT a leap year, unless:
The year is also evenly divisible by 400. Then it is a leap year.

if(year%4==0 or year%100!=0 and year%400==0):
        leap=True
