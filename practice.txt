1. split and join
>>> a = "this is a string"
>>> a = a.split(" ") # a is converted to a list of strings. 
>>> print a
['this', 'is', 'a', 'string']

>>> a = "-".join(a)
>>> print a
this-is-a-string 
https://www.hackerrank.com/challenges/python-string-split-and-join/problem?isFullScreen=true


2. isalnum, isalpha, isdigit, islower, isupper
https://www.hackerrank.com/challenges/string-validators/problem?isFullScreen=true



3. .capitalize(), .upper(), .lower()
https://www.hackerrank.com/challenges/capitalize/problem?isFullScreen=true


4. collections.Counter()
A counter is a container that stores elements as dictionary keys, and their counts are stored as dictionary values.

Sample Code

>>> from collections import Counter
>>> 
>>> myList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3]
>>> print Counter(myList)
Counter({2: 4, 3: 4, 1: 3, 4: 2, 5: 1})


5. map()

def addition(n):
    return n + n
 
# We double all numbers using map()
numbers = (1, 2, 3, 4)
result = map(addition, numbers)
print(list(result))
Output-
[2, 4, 6, 8]

https://www.hackerrank.com/challenges/collections-counter/problem?isFullScreen=true


6. s=set() / set
   t=() /tuple
s.add()
s.update()
s.discard()
 If that value is not present, discard() does nothing, but remove() will raise a KeyError exception
Sets are an unordered collection of unique values. A single set contains values of any immutable data type.
set operations-
https://www.hackerrank.com/challenges/symmetric-difference/problem?isFullScreen=trues
https://www.hackerrank.com/challenges/py-set-symmetric-difference-operation/problem?isFullScreen=true
https://www.hackerrank.com/challenges/py-set-mutations/problem?isFullScreen=true

https://www.hackerrank.com/challenges/py-check-subset/submissions/code/364029732

https://www.hackerrank.com/challenges/py-check-strict-superset/problem?isFullScreen=true


>>> s = set("Hacker")
>>> print s.difference("Rank")
set(['c', 'r', 'e', 'H'])

from collections import Counter
x = Counter("geeksforgeeks")
for i in x.elements():
	print ( i, end = " ")

for key, val in b.items():
    if val == 1:
        print(key)

union etc.
https://www.hackerrank.com/challenges/py-set-symmetric-difference-operation/problem?isFullScreen=true


We have seen the applications of union, intersection, difference and symmetric difference operations, but these operations do not make any changes or mutations to the set.

We can use the following operations to create mutations to a set:

.update() or |=




7. itertools.combinations_with_replacement(iterable, r)
This tool returns  length subsequences of elements from the input iterable allowing individual elements to be repeated more than once.

Combinations are emitted in lexicographic sorted order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order.

https://www.hackerrank.com/challenges/itertools-permutations/problem?isFullScreen=true
https://www.hackerrank.com/challenges/itertools-combinations/problem?isFullScreen=true


8. enumerate()
l1 = ["eat", "sleep", "repeat"]
s1 = "geek"
 
# creating enumerate objects
obj1 = enumerate(l1)
obj2 = enumerate(s1)
 
print ("Return type:", type(obj1))
print (list(enumerate(l1)))
 
# changing start index to 2 from 0
print (list(enumerate(s1, 2)))
Output:

Return type: <class 'enumerate'>
[(0, 'eat'), (1, 'sleep'), (2, 'repeat')]
[(2, 'g'), (3, 'e'), (4, 'e'), (5, 'k')]


9. calendar
import calendar
m,d,y=map(int, input().split())
weekday=calendar.weekday(y, m, d) #0th indexed

print(calendar.day_name[weekday].upper())

https://docs.python.org/2/library/calendar.html#calendar.TextCalendar
https://www.hackerrank.com/challenges/calendar-module/problem?isFullScreen=true


10.try, except, else, finally

11 class
	class acts as a template/blueprint for the object
	object is an instance of the class

self parameter is a reference to the current instance or object of the class and it is used to access variables belonging to that class.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class person:
    height=6
    weight=71
    
    def info(self):
        self.height=5
        self.weight=56
        print(f'height is {self.height} and weight is {self.weight}')
        
   
faiz=person()     
print(faiz.height)
print(faiz.weight)

faiz.info()

o/p:
6
71
height is 45 and weight is 456

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

try:
  print('x')
except:
  print("Something went wrong")
else:
	print('ok')
finally:
  print("The 'try except' is finished")

o/p:
	x
	ok
	The 'try except' is finished




try:
  print(x)
except:
  print("Something went wrong")
else:
	print('hey')
finally:
  print("The 'try except' is finished")

o/p:
	x
	hey
	The 'try except' is finished

